version: "3"

dotenv: [".env"]

tasks:
  default:
    desc: 利用可能なタスクを一覧表示
    cmds:
      - task --list

  setup:
    desc: uv 仮想環境のセットアップ
    cmds:
      - uv venv
      - uv sync
      - uv pip install -r pyproject.toml

  start:
    desc: FastAPI サーバーを起動
    cmds:
      - uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  format:
    desc: コードのフォーマット
    cmds:
      - uv run ruff format app tests

  lint-mypy:
    desc: コードの型チェック
    cmds:
      - uv run mypy app
      - uv run mypy tests

  lint-ruff:
    desc: コードの静的解析
    cmds:
      - uv run ruff check app tests --fix

  lint-importlinter:
    desc: コードの依存関係のチェック
    cmds:
      - uv run lint-imports

  lint:
    desc: すべての静的解析を実行
    cmds:
      - task lint-mypy
      - task lint-ruff
      - task lint-importlinter

  test:
    desc: テストの実行
    cmds:
      - uv run pytest tests --cov=app --cov-report=term-missing --cov-branch

  update-deps:
    desc: 依存関係を更新し、uv.lock を再生成
    cmds:
      - rm -f uv.lock
      - uv lock

  clean:
    desc: uv の仮想環境を削除
    cmds:
      - rm -rf .venv
      - uv clean

  gcloud-auth:
    desc: GCP の認証情報を設定（アプリケーション用とCLI用の両方）
    cmds:
      - gcloud auth login --no-launch-browser # CLI操作用の認証を追加
      - gcloud auth application-default login --no-launch-browser
      - gcloud auth application-default set-quota-project ${PROJECT_ID}

  docker-build:
    desc: Docker イメージをビルド
    cmds:
      - docker build -t uv-fastapi .

  docker-run:
    desc: Docker イメージをローカルで実行
    cmds:
      - docker run -p 8000:80 uv-fastapi

  gcloud-deploy:
    desc: GCP に Cloud Run にデプロイ
    cmds:
      - gcloud run deploy ${PROJECT_ID} --image gcr.io/${PROJECT_ID}/uv-fastapi --platform managed --region asia-northeast1 --allow-unauthenticated

  gcloud-setup-repo:
    desc: Artifact Registryリポジトリを作成（初回のみ必要）
    cmds:
      - gcloud artifacts repositories create {{.REPO_NAME}} --repository-format=docker --location={{.LOCATION}} --project={{.PROJECT_ID}}
    vars:
      REPO_NAME: '{{default "backend-repo" .REPO_NAME}}'
      LOCATION: '{{default "us-central1" .LOCATION}}'

  gcloud-build-push:
    desc: バックエンドDockerイメージをビルドしてArtifact Registryにプッシュ（Mac用クロスプラットフォームビルド）
    cmds:
      - >
        docker buildx build --platform linux/amd64
        -t {{.LOCATION}}-docker.pkg.dev/{{.PROJECT_ID}}/{{.REPO_NAME}}/{{.SERVICE_NAME}}:{{.TAG}}
        . --push
    vars:
      SERVICE_NAME: '{{default "backend-app" .SERVICE_NAME}}'
      REPO_NAME: '{{default "backend-repo" .REPO_NAME}}'
      LOCATION: '{{default "us-central1" .LOCATION}}'
      TAG: '{{default "latest" .TAG}}'

  gcloud-deploy-backend:
    desc: バックエンドをCloud Runにデプロイ
    cmds:
      - >
        gcloud run deploy {{.SERVICE_NAME}}
        --image {{.LOCATION}}-docker.pkg.dev/{{.PROJECT_ID}}/{{.REPO_NAME}}/{{.SERVICE_NAME}}:{{.TAG}}
        --project {{.PROJECT_ID}}
        --platform managed
        --region {{.LOCATION}}
        --allow-unauthenticated
        --port 8000
    vars:
      SERVICE_NAME: '{{default "backend-app" .SERVICE_NAME}}'
      REPO_NAME: '{{default "backend-repo" .REPO_NAME}}'
      LOCATION: '{{default "us-central1" .LOCATION}}'
      TAG: '{{default "latest" .TAG}}'

  deploy-backend:
    desc: バックエンドのビルドからデプロイまでを一括実行
    cmds:
      - task gcloud-build-push
      - task gcloud-deploy-backend

  # IAP関連のタスク
  gcloud-enable-iap:
    desc: IAPに必要なAPIを有効化
    cmds:
      - gcloud services enable iap.googleapis.com --project {{.PROJECT_ID}}
      - gcloud services enable cloudresourcemanager.googleapis.com --project {{.PROJECT_ID}}
    vars:
      PROJECT_ID: "{{.PROJECT_ID}}"

  gcloud-create-lb-for-iap:
    desc: IAPを使用するためのロードバランサーをセットアップ
    cmds:
      - >
        gcloud compute network-endpoint-groups create {{.SERVICE_NAME}}-neg
        --region={{.LOCATION}}
        --network-endpoint-type=serverless
        --cloud-run-service={{.SERVICE_NAME}}
        --project {{.PROJECT_ID}}
      - >
        gcloud compute backend-services create {{.SERVICE_NAME}}-backend
        --global
        --project {{.PROJECT_ID}}
        --iap=enabled,oauth2-client-id={{.OAUTH_CLIENT_ID}},oauth2-client-secret={{.OAUTH_CLIENT_SECRET}}
      - >
        gcloud compute backend-services add-backend {{.SERVICE_NAME}}-backend
        --global
        --network-endpoint-group={{.SERVICE_NAME}}-neg
        --network-endpoint-group-region={{.LOCATION}}
        --project {{.PROJECT_ID}}
      - >
        gcloud compute url-maps create {{.SERVICE_NAME}}-urlmap
        --default-service={{.SERVICE_NAME}}-backend
        --project {{.PROJECT_ID}}
      - >
        gcloud compute target-https-proxies create {{.SERVICE_NAME}}-proxy
        --url-map={{.SERVICE_NAME}}-urlmap
        --ssl-certificates={{.CERT_NAME}}
        --project {{.PROJECT_ID}}
      - >
        gcloud compute forwarding-rules create {{.SERVICE_NAME}}-frontend
        --global
        --target-https-proxy={{.SERVICE_NAME}}-proxy
        --ports=443
        --project {{.PROJECT_ID}}
    vars:
      SERVICE_NAME: '{{default "backend-app" .SERVICE_NAME}}'
      LOCATION: '{{default "us-central1" .LOCATION}}'
      CERT_NAME: '{{default "my-certificate" .CERT_NAME}}'
      OAUTH_CLIENT_ID: "{{.OAUTH_CLIENT_ID}}"
      OAUTH_CLIENT_SECRET: "{{.OAUTH_CLIENT_SECRET}}"

  gcloud-set-iap-policy:
    desc: IAPアクセス制御ポリシーを設定
    cmds:
      - >
        gcloud iap web add-iam-policy-binding
        --resource-type=backend-services
        --service={{.SERVICE_NAME}}-backend
        --member={{.MEMBER}}
        --role=roles/iap.httpsResourceAccessor
        --project {{.PROJECT_ID}}
    vars:
      SERVICE_NAME: '{{default "backend-app" .SERVICE_NAME}}'
      MEMBER: '{{default "user:example@gmail.com" .MEMBER}}'

  setup-iap-protection:
    desc: Cloud RunにIAPを使った認証保護を設定
    cmds:
      - task gcloud-enable-iap
      - task gcloud-create-lb-for-iap
      - task gcloud-set-iap-policy

  gcloud-list-certs:
    desc: 現在のプロジェクトのSSL証明書一覧を表示
    cmds:
      - gcloud compute ssl-certificates list --project {{.PROJECT_ID}}

  gcloud-update-ingress:
    desc: Cloud RunサービスのIngress設定を更新（IAP用）
    cmds:
      - >
        gcloud run services update {{.SERVICE_NAME}}
        --ingress=internal-and-cloud-load-balancing
        --region={{.LOCATION}}
        --project={{.PROJECT_ID}}
    vars:
      SERVICE_NAME: '{{default "fastapi-app" .SERVICE_NAME}}'
      LOCATION: '{{default "us-central1" .LOCATION}}'

  gcloud-create-managed-cert:
    desc: 新しいサブドメイン用のGoogle管理SSL証明書を作成
    cmds:
      - >
        gcloud compute ssl-certificates create {{.SERVICE_NAME}}-cert
        --project {{.PROJECT_ID}}
        --global
        --domains {{.SUBDOMAIN}}.kugimiya-test.co        gcloud compute ssl-certificates describe fastapi-app-cert --project welcome-study-projectm
    vars:
      SERVICE_NAME: '{{default "fastapi-app" .SERVICE_NAME}}'
      SUBDOMAIN: '{{default "api" .SUBDOMAIN}}'

  gcloud-setup-iap-sa:
    desc: IAP用のサービスアカウントのセットアップ
    cmds:
      # 1. Cloud RunサービスのサービスアカウントIDを取得
      - |
        CR_SERVICE_ACCOUNT=$(gcloud run services describe {{.SERVICE_NAME}} \
          --region {{.LOCATION}} \
          --project {{.PROJECT_ID}} \
          --format="value(serviceAccountEmail)")
      # 2. IAP用サービスアカウントを作成（存在しない場合）
      - |
        IAP_SA="service-$(gcloud projects describe {{.PROJECT_ID}} --format='value(projectNumber)')@gcp-sa-iap.iam.gserviceaccount.com"
      # 3. IAP用サービスアカウントにCloud Runサービスへのアクセス権を付与
      - |
        gcloud projects add-iam-policy-binding {{.PROJECT_ID}} \
          --member="serviceAccount:$IAP_SA" \
          --role=roles/run.invoker
      # 4. Cloud RunサービスにIAPサービスアカウントを認識させる
      - |
        gcloud run services add-iam-policy-binding {{.SERVICE_NAME}} \
          --region={{.LOCATION}} \
          --member="serviceAccount:$IAP_SA" \
          --role=roles/run.invoker \
          --project={{.PROJECT_ID}}
      # 5. ロードバランサーを更新
      - >
        gcloud compute backend-services update {{.SERVICE_NAME}}-backend
        --iap=enabled,oauth2-client-id={{.OAUTH_CLIENT_ID}},oauth2-client-secret={{.OAUTH_CLIENT_SECRET}}
        --global
        --project={{.PROJECT_ID}}
    vars:
      SERVICE_NAME: '{{default "fastapi-app" .SERVICE_NAME}}'
      LOCATION: '{{default "us-central1" .LOCATION}}'
